{"version":3,"sources":["filter-tag-posts-new/script/filter-tag-posts-new.js"],"names":["HandleSelect","_classCallCheck","this","filterSelect","document","querySelector","filterItemWrapper","selectValue","checkboxes","_toConsumableArray","querySelectorAll","filterBoxes","handleSelectState","handleCheckboxes","_createClass","key","value","_this","classList","_this2","checkbox","handleCheckboxState","name","checked","map","updateSelectValue","selectedOption","innerHTML","toLowerCase","trim","forEach","box","itemValues","dataset","filtervalues","split","some","style","display"],"mappings":"qiEAAMA,aAAY,WAChB,SAAAA,IAAcC,gBAAAC,KAAAF,GACZE,KAAKC,aAAeC,SAASC,cAAc,wCAC3CH,KAAKI,kBAAoBJ,KAAKC,aAAaE,cAAc,uCACzDH,KAAKK,YAAcL,KAAKC,aAAaE,cAAc,8CACnDH,KAAKM,WAAUC,mBAAOL,SAASM,iBAAiB,6CAChDR,KAAKS,YAAWF,mBAAOL,SAASM,iBAAiB,gCAEjDR,KAAKU,oBACLV,KAAKW,kBACP,CA4CC,OA5CAC,aAAAd,EAAA,EAAAe,IAAA,oBAAAC,MAED,WAZgB,IAAAC,EAAAf,KAChBA,KAAAC,aAAAH,iBAAc,SAAA,WAAAC,EAAAA,aAAAiB,UAAAlB,OAAA,UACZiB,EAAKd,kBAAeC,UAASC,OAAa,SAC1C,GAcF,GAAC,CAAAU,IAAA,mBAAAC,MAED,WAbkB,IAAAG,EAAAjB,KAEhBA,KAAKU,WAAAA,KAAAA,SAAAA,GACLQ,EAAKP,iBAAkB,SAAA,WACzBM,EAAAE,sBAACP,EAAAA,kBAAAM,EAAAf,cAAA,SAAAiB,MAAAN,EAEDX,cAAAO,SAAoBW,SAAA,EAClBJ,EAAKhB,cAeH,GACF,GACF,GAAC,CAAAY,IAAA,sBAAAC,MAbA,WAAAD,KAAAP,WAAAgB,KAAA,SAAAJ,GAAAJ,EAEDX,cAAAQ,SAAAU,SAAmB,CAgBjB,GACF,GAAC,CAAAR,IAAA,oBAAAC,MAED,SAhBWK,GAiBTnB,KAAKK,YAhBIkB,UAAAA,CAiBX,GAAC,CAAAV,IAAA,eAAAC,MAED,WACE,IAdEU,EAAAxB,KAAAK,YAAAoB,UAAAC,cAAAC,OACH3B,KAAAS,YAAAmB,SAAA,SAAAC,GAAAhB,IAAAiB,EAAAD,EAAAE,QAAAC,aAAAN,cAAAO,MAAA,KAGqB,iBAAhBT,GAA8BM,EAAAI,MAAA,SAAApB,GAAA,OAAAA,EAAAa,SAAAH,CAAA,IAChCN,EAAAA,MAASf,QAAAA,QAEb0B,EAAAM,MAAAC,QAAA,MAACvB,GAkBD,KAACf,CAAA,CAtDe,GAyDlB,IAjBGA","file":"filter-tag-posts-new.min.js","sourcesContent":["class HandleSelect {\r\n  constructor() {\r\n    this.filterSelect = document.querySelector('.filter-tag-posts-new__filter-select')\r\n    this.filterItemWrapper = this.filterSelect.querySelector('.filter-tag-posts-new__filter-items')\r\n    this.selectValue = this.filterSelect.querySelector('.filter-tag-posts-new__filter-select-value')\r\n    this.checkboxes = [...document.querySelectorAll('.filter-tag-posts-new__filter-controller')]\r\n    this.filterBoxes = [...document.querySelectorAll('.filter-tag-posts-new__post')]\r\n\r\n    this.handleSelectState()\r\n    this.handleCheckboxes()\r\n  }\r\n\r\n  handleSelectState() {\r\n    this.filterSelect.addEventListener('click', () => {\r\n      this.filterSelect.classList.toggle('opened')\r\n      this.filterItemWrapper.classList.toggle('opened')\r\n    })\r\n  }\r\n\r\n  handleCheckboxes() {\r\n    this.checkboxes.map((checkbox) => {\r\n      checkbox.addEventListener('click', () => {\r\n        this.handleCheckboxState()\r\n        this.updateSelectValue(checkbox.querySelector('input').name)\r\n\r\n        checkbox.querySelector('input').checked = true\r\n\r\n        this.handleFilter()\r\n      })\r\n    })\r\n  }\r\n\r\n  handleCheckboxState() {\r\n    this.checkboxes.map((checkbox) => {\r\n      checkbox.querySelector('input').checked = false\r\n    })\r\n  }\r\n\r\n  updateSelectValue(title) {\r\n    this.selectValue.innerHTML = title\r\n  }\r\n\r\n  handleFilter() {\r\n    const selectedOption = this.selectValue.innerHTML.toLowerCase().trim()\r\n\r\n    this.filterBoxes.forEach((box) => {\r\n      const itemValues = box.dataset.filtervalues.toLowerCase().split(',')\r\n\r\n      if (selectedOption === 'mostrar todo' || itemValues.some((value) => value.trim() === selectedOption)) {\r\n        box.style.display = 'block'\r\n      } else {\r\n        box.style.display = 'none'\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nnew HandleSelect()\r\n"]}