import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';

/**
 * WordPress dependencies
 */
import { forwardRef } from '@wordpress/element';
import deprecated from '@wordpress/deprecated';
/**
 * Internal dependencies
 */

import ToolbarGroup from '../toolbar-group';
import ToolbarContainer from './toolbar-container';
import { ContextSystemProvider } from '../../ui/context'; // TODO:
// - (optional) make the legacy `DropdownMenu` read the context variable
// - swap the legacy `DropdownMenu` with the new version of the component
//   once it's stable

const CONTEXT_SYSTEM_VALUE = {
  DropdownMenu: {
    // Note: the legacy `DropdownMenu` component is not yet reactive to this
    // context variant. See https://github.com/WordPress/gutenberg/pull/51097.
    variant: 'toolbar'
  }
};

function UnforwardedToolbar({
  className,
  label,
  ...props
}, ref) {
  if (!label) {
    deprecated('Using Toolbar without label prop', {
      since: '5.6',
      alternative: 'ToolbarGroup component',
      link: 'https://developer.wordpress.org/block-editor/components/toolbar/'
    });
    return createElement(ToolbarGroup, _extends({}, props, {
      className: className
    }));
  } // `ToolbarGroup` already uses components-toolbar for compatibility reasons.


  const finalClassName = classnames('components-accessible-toolbar', className);
  return createElement(ContextSystemProvider, {
    value: CONTEXT_SYSTEM_VALUE
  }, createElement(ToolbarContainer, _extends({
    className: finalClassName,
    label: label,
    ref: ref
  }, props)));
}
/**
 * Renders a toolbar.
 *
 * To add controls, simply pass `ToolbarButton` components as children.
 *
 * ```jsx
 * import { Toolbar, ToolbarButton } from '@wordpress/components';
 * import { formatBold, formatItalic, link } from '@wordpress/icons';
 *
 * function MyToolbar() {
 *   return (
 *     <Toolbar label="Options">
 *       <ToolbarButton icon={ formatBold } label="Bold" />
 *       <ToolbarButton icon={ formatItalic } label="Italic" />
 *       <ToolbarButton icon={ link } label="Link" />
 *     </Toolbar>
 *   );
 * }
 * ```
 */


export const Toolbar = forwardRef(UnforwardedToolbar);
export default Toolbar;
//# sourceMappingURL=index.js.map