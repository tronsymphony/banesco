/// <reference types="react" />
import type { FontSizePickerProps } from './types';
export declare const Container: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>, {}>;
export declare const Header: import("@emotion/styled").StyledComponent<Omit<import("../flex/types").FlexProps, "gap" | "align"> & {
    alignment?: "initial" | "left" | "right" | (string & {}) | "bottom" | "top" | "-moz-initial" | "inherit" | "revert" | "unset" | "stretch" | "center" | "end" | "flex-end" | "flex-start" | "start" | "baseline" | "normal" | "self-end" | "self-start" | "edge" | "bottomLeft" | "bottomRight" | "topLeft" | "topRight" | undefined;
    spacing?: import("csstype").Property.Width<string | number> | undefined;
} & import("react").RefAttributes<any> & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof import("react").HTMLAttributes<HTMLDivElement>>, "direction" | "wrap" | "expanded" | "justify" | "children" | "as" | "spacing" | keyof import("react").RefAttributes<any> | "isReversed" | "alignment"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const HeaderToggle: import("@emotion/styled").StyledComponent<(import("../button/types").ButtonProps & import("react").RefAttributes<any>) & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const HeaderLabel: import("@emotion/styled").StyledComponent<import("../base-control/types").BaseControlVisualLabelProps & Omit<Pick<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "key" | keyof import("react").HTMLAttributes<HTMLSpanElement>>, "children" | "as"> & {
    as?: keyof JSX.IntrinsicElements | undefined;
} & {
    theme?: import("@emotion/react").Theme | undefined;
}, {}, {}>;
export declare const HeaderHint: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {}>;
export declare const Controls: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & {
    __nextHasNoMarginBottom: boolean;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const ResetButton: import("@emotion/styled").StyledComponent<((import("../button/types").ButtonProps & import("react").RefAttributes<any>) & {
    theme?: import("@emotion/react").Theme | undefined;
}) & {
    size: FontSizePickerProps['size'];
}, {}, {}>;
//# sourceMappingURL=styles.d.ts.map