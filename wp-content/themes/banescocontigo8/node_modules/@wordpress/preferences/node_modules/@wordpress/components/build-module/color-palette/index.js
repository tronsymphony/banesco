import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import { colord, extend } from 'colord';
import namesPlugin from 'colord/plugins/names';
import a11yPlugin from 'colord/plugins/a11y';
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { __, sprintf } from '@wordpress/i18n';
import { useCallback, useMemo, useState, forwardRef } from '@wordpress/element';
/**
 * Internal dependencies
 */

import Dropdown from '../dropdown';
import { ColorPicker } from '../color-picker';
import CircularOptionPicker from '../circular-option-picker';
import { VStack } from '../v-stack';
import { Truncate } from '../truncate';
import { ColorHeading } from './styles';
import DropdownContentWrapper from '../dropdown/dropdown-content-wrapper';
import { extractColorNameFromCurrentValue, isMultiplePaletteArray, normalizeColorValue } from './utils';
extend([namesPlugin, a11yPlugin]);

function SinglePalette({
  className,
  clearColor,
  colors,
  onChange,
  value,
  actions
}) {
  const colorOptions = useMemo(() => {
    return colors.map(({
      color,
      name
    }, index) => {
      const colordColor = colord(color);
      const isSelected = value === color;
      return createElement(CircularOptionPicker.Option, {
        key: `${color}-${index}`,
        isSelected: isSelected,
        selectedIconProps: isSelected ? {
          fill: colordColor.contrast() > colordColor.contrast('#000') ? '#fff' : '#000'
        } : {},
        tooltipText: name || // translators: %s: color hex code e.g: "#f00".
        sprintf(__('Color code: %s'), color),
        style: {
          backgroundColor: color,
          color
        },
        onClick: isSelected ? clearColor : () => onChange(color, index),
        "aria-label": name ? // translators: %s: The name of the color e.g: "vivid red".
        sprintf(__('Color: %s'), name) : // translators: %s: color hex code e.g: "#f00".
        sprintf(__('Color code: %s'), color)
      });
    });
  }, [colors, value, onChange, clearColor]);
  return createElement(CircularOptionPicker, {
    className: className,
    options: colorOptions,
    actions: actions
  });
}

function MultiplePalettes({
  className,
  clearColor,
  colors,
  onChange,
  value,
  actions,
  headingLevel
}) {
  if (colors.length === 0) {
    return null;
  }

  return createElement(VStack, {
    spacing: 3,
    className: className
  }, colors.map(({
    name,
    colors: colorPalette
  }, index) => {
    return createElement(VStack, {
      spacing: 2,
      key: index
    }, createElement(ColorHeading, {
      level: headingLevel
    }, name), createElement(SinglePalette, {
      clearColor: clearColor,
      colors: colorPalette,
      onChange: newColor => onChange(newColor, index),
      value: value,
      actions: colors.length === index + 1 ? actions : null
    }));
  }));
}

export function CustomColorPickerDropdown({
  isRenderedInSidebar,
  popoverProps: receivedPopoverProps,
  ...props
}) {
  const popoverProps = useMemo(() => ({
    shift: true,
    ...(isRenderedInSidebar ? {
      // When in the sidebar: open to the left (stacking),
      // leaving the same gap as the parent popover.
      placement: 'left-start',
      offset: 34
    } : {
      // Default behavior: open below the anchor
      placement: 'bottom',
      offset: 8
    }),
    ...receivedPopoverProps
  }), [isRenderedInSidebar, receivedPopoverProps]);
  return createElement(Dropdown, _extends({
    contentClassName: "components-color-palette__custom-color-dropdown-content",
    popoverProps: popoverProps
  }, props));
}

function UnforwardedColorPalette(props, forwardedRef) {
  const {
    clearable = true,
    colors = [],
    disableCustomColors = false,
    enableAlpha = false,
    onChange,
    value,
    __experimentalIsRenderedInSidebar = false,
    headingLevel = 2,
    ...otherProps
  } = props;
  const [normalizedColorValue, setNormalizedColorValue] = useState(value);
  const clearColor = useCallback(() => onChange(undefined), [onChange]);
  const customColorPaletteCallbackRef = useCallback(node => {
    setNormalizedColorValue(normalizeColorValue(value, node));
  }, [value]);
  const hasMultipleColorOrigins = isMultiplePaletteArray(colors);
  const buttonLabelName = useMemo(() => extractColorNameFromCurrentValue(value, colors, hasMultipleColorOrigins), [value, colors, hasMultipleColorOrigins]);

  const renderCustomColorPicker = () => createElement(DropdownContentWrapper, {
    paddingSize: "none"
  }, createElement(ColorPicker, {
    color: normalizedColorValue,
    onChange: color => onChange(color),
    enableAlpha: enableAlpha
  }));

  const isHex = value?.startsWith('#'); // Leave hex values as-is. Remove the `var()` wrapper from CSS vars.

  const displayValue = value?.replace(/^var\((.+)\)$/, '$1');
  const customColorAccessibleLabel = !!displayValue ? sprintf( // translators: %1$s: The name of the color e.g: "vivid red". %2$s: The color's hex code, with added hyphens e.g: "#-f-0-0".
  __('Custom color picker. The currently selected color is called "%1$s" and has a value of "%2$s".'), buttonLabelName, isHex ? displayValue.split('').join('-') : displayValue) : __('Custom color picker.');
  const paletteCommonProps = {
    clearable,
    clearColor,
    onChange,
    value,
    actions: !!clearable && createElement(CircularOptionPicker.ButtonAction, {
      onClick: clearColor
    }, __('Clear')),
    headingLevel
  };
  return createElement(VStack, _extends({
    spacing: 3,
    ref: forwardedRef
  }, otherProps), !disableCustomColors && createElement(CustomColorPickerDropdown, {
    isRenderedInSidebar: __experimentalIsRenderedInSidebar,
    renderContent: renderCustomColorPicker,
    renderToggle: ({
      isOpen,
      onToggle
    }) => createElement(VStack, {
      className: "components-color-palette__custom-color-wrapper",
      spacing: 0
    }, createElement("button", {
      ref: customColorPaletteCallbackRef,
      className: "components-color-palette__custom-color-button",
      "aria-expanded": isOpen,
      "aria-haspopup": "true",
      onClick: onToggle,
      "aria-label": customColorAccessibleLabel,
      style: {
        background: value
      }
    }), createElement(VStack, {
      className: "components-color-palette__custom-color-text-wrapper",
      spacing: 0.5
    }, createElement(Truncate, {
      className: "components-color-palette__custom-color-name"
    }, value ? buttonLabelName : 'No color selected'), createElement(Truncate, {
      className: classnames('components-color-palette__custom-color-value', {
        'components-color-palette__custom-color-value--is-hex': isHex
      })
    }, displayValue)))
  }), hasMultipleColorOrigins ? createElement(MultiplePalettes, _extends({}, paletteCommonProps, {
    colors: colors
  })) : createElement(SinglePalette, _extends({}, paletteCommonProps, {
    colors: colors
  })));
}
/**
 * Allows the user to pick a color from a list of pre-defined color entries.
 *
 * ```jsx
 * import { ColorPalette } from '@wordpress/components';
 * import { useState } from '@wordpress/element';
 *
 * const MyColorPalette = () => {
 *   const [ color, setColor ] = useState ( '#f00' )
 *   const colors = [
 *     { name: 'red', color: '#f00' },
 *     { name: 'white', color: '#fff' },
 *     { name: 'blue', color: '#00f' },
 *   ];
 *   return (
 *     <ColorPalette
 *       colors={ colors }
 *       value={ color }
 *       onChange={ ( color ) => setColor( color ) }
 *     />
 *   );
 * } );
 * ```
 */


export const ColorPalette = forwardRef(UnforwardedColorPalette);
export default ColorPalette;
//# sourceMappingURL=index.js.map