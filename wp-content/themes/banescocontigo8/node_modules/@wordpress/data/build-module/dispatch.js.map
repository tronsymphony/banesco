{"version":3,"sources":["@wordpress/data/src/dispatch.ts"],"names":["defaultRegistry","dispatch","storeNameOrDescriptor"],"mappings":"AAAA;AACA;AACA;AAOA,OAAOA,eAAP,MAA4B,oBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CACNC,qBADM,EAE8B;AACpC,SAAOF,eAAe,CAACC,QAAhB,CAA0BC,qBAA1B,CAAP;AACA","sourcesContent":["/**\n * Internal dependencies\n */\nimport type {\n\tActionCreatorsOf,\n\tAnyConfig,\n\tConfigOf,\n\tStoreDescriptor,\n} from './types';\nimport defaultRegistry from './default-registry';\n\n/**\n * Given a store descriptor, returns an object of the store's action creators.\n * Calling an action creator will cause it to be dispatched, updating the state value accordingly.\n *\n * Note: Action creators returned by the dispatch will return a promise when\n * they are called.\n *\n * @param storeNameOrDescriptor The store descriptor. The legacy calling convention of passing\n *                              the store name is also supported.\n *\n * @example\n * ```js\n * import { dispatch } from '@wordpress/data';\n * import { store as myCustomStore } from 'my-custom-store';\n *\n * dispatch( myCustomStore ).setPrice( 'hammer', 9.75 );\n * ```\n * @return Object containing the action creators.\n */\nexport function dispatch< T extends StoreDescriptor< AnyConfig > >(\n\tstoreNameOrDescriptor: string | T\n): ActionCreatorsOf< ConfigOf< T > > {\n\treturn defaultRegistry.dispatch( storeNameOrDescriptor );\n}\n"]}