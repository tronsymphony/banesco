{"version":3,"sources":["@wordpress/rich-text/src/get-active-formats.js"],"names":["getActiveFormats","value","EMPTY_ACTIVE_FORMATS","formats","start","end","activeFormats","undefined","formatsBefore","formatsAfter","length","selectedFormats","slice","_activeFormats","i","formatsAtIndex","ii","format","find","_format","splice"],"mappings":";;;;;;;AAMA;;AANA;;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,gBAAT,CAA2BC,KAA3B,EAAkCC,oBAAoB,GAAG,EAAzD,EAA8D;AACpE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,GAAlB;AAAuBC,IAAAA;AAAvB,MAAyCL,KAA/C;;AACA,MAAKG,KAAK,KAAKG,SAAf,EAA2B;AAC1B,WAAOL,oBAAP;AACA;;AAED,MAAKE,KAAK,KAAKC,GAAf,EAAqB;AACpB;AACA,QAAKC,aAAL,EAAqB;AACpB,aAAOA,aAAP;AACA;;AAED,UAAME,aAAa,GAAGL,OAAO,CAAEC,KAAK,GAAG,CAAV,CAAP,IAAwBF,oBAA9C;AACA,UAAMO,YAAY,GAAGN,OAAO,CAAEC,KAAF,CAAP,IAAoBF,oBAAzC,CAPoB,CASpB;AACA;AACA;;AACA,QAAKM,aAAa,CAACE,MAAd,GAAuBD,YAAY,CAACC,MAAzC,EAAkD;AACjD,aAAOF,aAAP;AACA;;AAED,WAAOC,YAAP;AACA,GAvBmE,CAyBpE;;;AACA,MAAK,CAAEN,OAAO,CAAEC,KAAF,CAAd,EAA0B;AACzB,WAAOF,oBAAP;AACA;;AAED,QAAMS,eAAe,GAAGR,OAAO,CAACS,KAAR,CAAeR,KAAf,EAAsBC,GAAtB,CAAxB,CA9BoE,CAgCpE;;AACA,QAAMQ,cAAc,GAAG,CAAE,GAAGF,eAAe,CAAE,CAAF,CAApB,CAAvB;AACA,MAAIG,CAAC,GAAGH,eAAe,CAACD,MAAxB,CAlCoE,CAoCpE;AACA;;AACA,SAAQI,CAAC,EAAT,EAAc;AACb,UAAMC,cAAc,GAAGJ,eAAe,CAAEG,CAAF,CAAtC,CADa,CAGb;AACA;;AACA,QAAK,CAAEC,cAAP,EAAwB;AACvB,aAAOb,oBAAP;AACA;;AAED,QAAIc,EAAE,GAAGH,cAAc,CAACH,MAAxB,CATa,CAWb;AACA;;AACA,WAAQM,EAAE,EAAV,EAAe;AACd,YAAMC,MAAM,GAAGJ,cAAc,CAAEG,EAAF,CAA7B;;AAEA,UACC,CAAED,cAAc,CAACG,IAAf,CAAuBC,OAAF,IACtB,kCAAeF,MAAf,EAAuBE,OAAvB,CADC,CADH,EAIE;AACDN,QAAAA,cAAc,CAACO,MAAf,CAAuBJ,EAAvB,EAA2B,CAA3B;AACA;AACD,KAvBY,CAyBb;;;AACA,QAAKH,cAAc,CAACH,MAAf,KAA0B,CAA/B,EAAmC;AAClC,aAAOR,oBAAP;AACA;AACD;;AAED,SAAOW,cAAc,IAAIX,oBAAzB;AACA","sourcesContent":["/** @typedef {import('./types').RichTextValue} RichTextValue */\n/** @typedef {import('./types').RichTextFormatList} RichTextFormatList */\n\n/**\n * Internal dependencies\n */\nimport { isFormatEqual } from './is-format-equal';\n\n/**\n * Gets the all format objects at the start of the selection.\n *\n * @param {RichTextValue} value                Value to inspect.\n * @param {Array}         EMPTY_ACTIVE_FORMATS Array to return if there are no\n *                                             active formats.\n *\n * @return {RichTextFormatList} Active format objects.\n */\nexport function getActiveFormats( value, EMPTY_ACTIVE_FORMATS = [] ) {\n\tconst { formats, start, end, activeFormats } = value;\n\tif ( start === undefined ) {\n\t\treturn EMPTY_ACTIVE_FORMATS;\n\t}\n\n\tif ( start === end ) {\n\t\t// For a collapsed caret, it is possible to override the active formats.\n\t\tif ( activeFormats ) {\n\t\t\treturn activeFormats;\n\t\t}\n\n\t\tconst formatsBefore = formats[ start - 1 ] || EMPTY_ACTIVE_FORMATS;\n\t\tconst formatsAfter = formats[ start ] || EMPTY_ACTIVE_FORMATS;\n\n\t\t// By default, select the lowest amount of formats possible (which means\n\t\t// the caret is positioned outside the format boundary). The user can\n\t\t// then use arrow keys to define `activeFormats`.\n\t\tif ( formatsBefore.length < formatsAfter.length ) {\n\t\t\treturn formatsBefore;\n\t\t}\n\n\t\treturn formatsAfter;\n\t}\n\n\t// If there's no formats at the start index, there are not active formats.\n\tif ( ! formats[ start ] ) {\n\t\treturn EMPTY_ACTIVE_FORMATS;\n\t}\n\n\tconst selectedFormats = formats.slice( start, end );\n\n\t// Clone the formats so we're not mutating the live value.\n\tconst _activeFormats = [ ...selectedFormats[ 0 ] ];\n\tlet i = selectedFormats.length;\n\n\t// For performance reasons, start from the end where it's much quicker to\n\t// realise that there are no active formats.\n\twhile ( i-- ) {\n\t\tconst formatsAtIndex = selectedFormats[ i ];\n\n\t\t// If we run into any index without formats, we're sure that there's no\n\t\t// active formats.\n\t\tif ( ! formatsAtIndex ) {\n\t\t\treturn EMPTY_ACTIVE_FORMATS;\n\t\t}\n\n\t\tlet ii = _activeFormats.length;\n\n\t\t// Loop over the active formats and remove any that are not present at\n\t\t// the current index.\n\t\twhile ( ii-- ) {\n\t\t\tconst format = _activeFormats[ ii ];\n\n\t\t\tif (\n\t\t\t\t! formatsAtIndex.find( ( _format ) =>\n\t\t\t\t\tisFormatEqual( format, _format )\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t_activeFormats.splice( ii, 1 );\n\t\t\t}\n\t\t}\n\n\t\t// If there are no active formats, we can stop.\n\t\tif ( _activeFormats.length === 0 ) {\n\t\t\treturn EMPTY_ACTIVE_FORMATS;\n\t\t}\n\t}\n\n\treturn _activeFormats || EMPTY_ACTIVE_FORMATS;\n}\n"]}