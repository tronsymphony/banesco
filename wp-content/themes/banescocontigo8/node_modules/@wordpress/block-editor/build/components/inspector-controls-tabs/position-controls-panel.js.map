{"version":3,"sources":["@wordpress/block-editor/src/components/inspector-controls-tabs/position-controls-panel.js"],"names":["PositionControlsPanel","initialOpen","setInitialOpen","multiSelectedBlocks","select","getBlocksByClientId","getSelectedBlockClientIds","blockEditorStore","clientIds","undefined","some","attributes","style","position","type","PositionControls","fills","InspectorControlsGroups","Slot","__unstableName","hasFills","Boolean","length"],"mappings":";;;;;;;;;AAQA;;AALA;;AAIA;;AAEA;;AAKA;;AACA;;AACA;;AAhBA;AACA;AACA;;AASA;AACA;AACA;AAKA,MAAMA,qBAAqB,GAAG,MAAM;AACnC,QAAM,CAAEC,WAAF,EAAeC,cAAf,IAAkC,wBAAxC,CADmC,CAGnC;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAA0B,qBAAaC,MAAF,IAAc;AACxD,UAAM;AAAEC,MAAAA,mBAAF;AAAuBC,MAAAA;AAAvB,QACLF,MAAM,CAAEG,YAAF,CADP;AAEA,UAAMC,SAAS,GAAGF,yBAAyB,EAA3C;AACA,WAAO;AACNH,MAAAA,mBAAmB,EAAEE,mBAAmB,CAAEG,SAAF;AADlC,KAAP;AAGA,GAP+B,EAO7B,EAP6B,CAAhC;AASA,gCAAiB,MAAM;AACtB;AACA;AACA,QAAKP,WAAW,KAAKQ,SAArB,EAAiC;AAChCP,MAAAA,cAAc,CACbC,mBAAmB,CAACO,IAApB,CACC;AAAA;;AAAA,YAAE;AAAEC,UAAAA;AAAF,SAAF;AAAA,eAAsB,CAAC,EAAEA,UAAF,aAAEA,UAAF,oCAAEA,UAAU,CAAEC,KAAd,uEAAE,kBAAmBC,QAArB,kDAAE,sBAA6BC,IAA/B,CAAvB;AAAA,OADD,CADa,CAAd;AAKA;AACD,GAVD,EAUG,CAAEb,WAAF,EAAeE,mBAAf,EAAoCD,cAApC,CAVH;AAYA,SACC,4BAAC,qBAAD;AACC,IAAA,SAAS,EAAC,wCADX;AAEC,IAAA,KAAK,EAAG,cAAI,UAAJ,CAFT;AAGC,IAAA,WAAW,EAAGD,WAAH,aAAGA,WAAH,cAAGA,WAAH,GAAkB;AAH9B,KAKC,4BAAC,0BAAD,CAAmB,IAAnB;AAAwB,IAAA,KAAK,EAAC;AAA9B,IALD,CADD;AASA,CAlCD;;AAoCA,MAAMc,gBAAgB,GAAG,MAAM;AAC9B,QAAMC,KAAK,GAAG,4CACbC,gBAAwBJ,QAAxB,CAAiCK,IAAjC,CAAsCC,cADzB,CAAd;AAGA,QAAMC,QAAQ,GAAGC,OAAO,CAAEL,KAAK,IAAIA,KAAK,CAACM,MAAjB,CAAxB;;AAEA,MAAK,CAAEF,QAAP,EAAkB;AACjB,WAAO,IAAP;AACA;;AAED,SAAO,4BAAC,qBAAD,OAAP;AACA,CAXD;;eAaeL,gB","sourcesContent":["/**\n * WordPress dependencies\n */\nimport {\n\tPanelBody,\n\t__experimentalUseSlotFills as useSlotFills,\n} from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\nimport { useLayoutEffect, useState } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport InspectorControlsGroups from '../inspector-controls/groups';\nimport { default as InspectorControls } from '../inspector-controls';\nimport { store as blockEditorStore } from '../../store';\n\nconst PositionControlsPanel = () => {\n\tconst [ initialOpen, setInitialOpen ] = useState();\n\n\t// Determine whether the panel should be expanded.\n\tconst { multiSelectedBlocks } = useSelect( ( select ) => {\n\t\tconst { getBlocksByClientId, getSelectedBlockClientIds } =\n\t\t\tselect( blockEditorStore );\n\t\tconst clientIds = getSelectedBlockClientIds();\n\t\treturn {\n\t\t\tmultiSelectedBlocks: getBlocksByClientId( clientIds ),\n\t\t};\n\t}, [] );\n\n\tuseLayoutEffect( () => {\n\t\t// If any selected block has a position set, open the panel by default.\n\t\t// The first block's value will still be used within the control though.\n\t\tif ( initialOpen === undefined ) {\n\t\t\tsetInitialOpen(\n\t\t\t\tmultiSelectedBlocks.some(\n\t\t\t\t\t( { attributes } ) => !! attributes?.style?.position?.type\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}, [ initialOpen, multiSelectedBlocks, setInitialOpen ] );\n\n\treturn (\n\t\t<PanelBody\n\t\t\tclassName=\"block-editor-block-inspector__position\"\n\t\t\ttitle={ __( 'Position' ) }\n\t\t\tinitialOpen={ initialOpen ?? false }\n\t\t>\n\t\t\t<InspectorControls.Slot group=\"position\" />\n\t\t</PanelBody>\n\t);\n};\n\nconst PositionControls = () => {\n\tconst fills = useSlotFills(\n\t\tInspectorControlsGroups.position.Slot.__unstableName\n\t);\n\tconst hasFills = Boolean( fills && fills.length );\n\n\tif ( ! hasFills ) {\n\t\treturn null;\n\t}\n\n\treturn <PositionControlsPanel />;\n};\n\nexport default PositionControls;\n"]}