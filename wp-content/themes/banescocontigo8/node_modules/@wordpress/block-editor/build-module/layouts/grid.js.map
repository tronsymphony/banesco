{"version":3,"sources":["@wordpress/block-editor/src/layouts/grid.js"],"names":["__","BaseControl","Flex","FlexItem","RangeControl","__experimentalUnitControl","UnitControl","__experimentalParseQuantityAndUnitFromRawValue","parseQuantityAndUnitFromRawValue","appendSelectors","getBlockGapCSS","getGapCSSValue","shouldSkipSerialization","RANGE_CONTROL_MAX_VALUES","px","vw","vh","em","rem","name","label","inspectorControls","GridLayoutInspectorControls","layout","onChange","toolBarControls","DefaultLayoutToolbarControls","getLayoutStyle","selector","style","blockName","hasBlockGapSupport","layoutDefinitions","minimumColumnWidth","blockGapValue","spacing","blockGap","undefined","output","rules","push","length","join","getOrientation","getAlignments","GridLayoutMinimumWidthControl","value","quantity","unit","handleSliderChange","next","handleUnitChange","newUnit","newValue","includes","toFixed","Math","round"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,EAAT,QAAmB,iBAAnB;AAEA,SACCC,WADD,EAECC,IAFD,EAGCC,QAHD,EAICC,YAJD,EAKCC,yBAAyB,IAAIC,WAL9B,EAMCC,8CAA8C,IAAIC,gCANnD,QAOO,uBAPP;AASA;AACA;AACA;;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,SAAhD;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,uBAAT,QAAwC,gBAAxC;AAEA,MAAMC,wBAAwB,GAAG;AAChCC,EAAAA,EAAE,EAAE,GAD4B;AAEhC,OAAK,GAF2B;AAGhCC,EAAAA,EAAE,EAAE,GAH4B;AAIhCC,EAAAA,EAAE,EAAE,GAJ4B;AAKhCC,EAAAA,EAAE,EAAE,EAL4B;AAMhCC,EAAAA,GAAG,EAAE;AAN2B,CAAjC;AASA,eAAe;AACdC,EAAAA,IAAI,EAAE,MADQ;AAEdC,EAAAA,KAAK,EAAEpB,EAAE,CAAE,MAAF,CAFK;AAGdqB,EAAAA,iBAAiB,EAAE,SAASC,2BAAT,OAGf;AAAA,QAHqD;AACxDC,MAAAA,MAAM,GAAG,EAD+C;AAExDC,MAAAA;AAFwD,KAGrD;AACH,WACC,cAAC,6BAAD;AACC,MAAA,MAAM,EAAGD,MADV;AAEC,MAAA,QAAQ,EAAGC;AAFZ,MADD;AAMA,GAba;AAcdC,EAAAA,eAAe,EAAE,SAASC,4BAAT,GAAwC;AACxD,WAAO,IAAP;AACA,GAhBa;AAiBdC,EAAAA,cAAc,EAAE,SAASA,cAAT,QAOZ;AAAA;;AAAA,QAPqC;AACxCC,MAAAA,QADwC;AAExCL,MAAAA,MAFwC;AAGxCM,MAAAA,KAHwC;AAIxCC,MAAAA,SAJwC;AAKxCC,MAAAA,kBALwC;AAMxCC,MAAAA;AANwC,KAOrC;AACH,UAAM;AAAEC,MAAAA,kBAAkB,GAAG;AAAvB,QAAmCV,MAAzC,CADG,CAGH;AACA;;AACA,UAAMW,aAAa,GAClBL,KAAK,SAAL,IAAAA,KAAK,WAAL,sBAAAA,KAAK,CAAEM,OAAP,0DAAgBC,QAAhB,IACA,CAAExB,uBAAuB,CAAEkB,SAAF,EAAa,SAAb,EAAwB,UAAxB,CADzB,GAEGnB,cAAc,CAAEkB,KAAF,aAAEA,KAAF,0CAAEA,KAAK,CAAEM,OAAT,oDAAE,gBAAgBC,QAAlB,EAA4B,OAA5B,CAFjB,GAGGC,SAJJ;AAMA,QAAIC,MAAM,GAAG,EAAb;AACA,UAAMC,KAAK,GAAG,EAAd;;AAEA,QAAKN,kBAAL,EAA0B;AACzBM,MAAAA,KAAK,CAACC,IAAN,CACE,uDAAuDP,kBAAoB,gBAD7E;AAGA;;AAED,QAAKM,KAAK,CAACE,MAAX,EAAoB;AACnB;AACA;AACAH,MAAAA,MAAM,GAAI,GAAG7B,eAAe,CAAEmB,QAAF,CAAc,MAAMW,KAAK,CAACG,IAAN,CAC/C,IAD+C,CAE7C,KAFH;AAGA,KA1BE,CA4BH;;;AACA,QAAKX,kBAAkB,IAAIG,aAA3B,EAA2C;AAC1CI,MAAAA,MAAM,IAAI5B,cAAc,CACvBkB,QADuB,EAEvBI,iBAFuB,EAGvB,MAHuB,EAIvBE,aAJuB,CAAxB;AAMA;;AACD,WAAOI,MAAP;AACA,GA9Da;;AA+DdK,EAAAA,cAAc,GAAG;AAChB,WAAO,YAAP;AACA,GAjEa;;AAkEdC,EAAAA,aAAa,GAAG;AACf,WAAO,EAAP;AACA;;AApEa,CAAf,C,CAuEA;;AACA,SAASC,6BAAT,QAA+D;AAAA,MAAvB;AAAEtB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAuB;AAC9D,QAAM;AAAES,IAAAA,kBAAkB,EAAEa,KAAK,GAAG;AAA9B,MAA0CvB,MAAhD;AACA,QAAM,CAAEwB,QAAF,EAAYC,IAAZ,IAAqBxC,gCAAgC,CAAEsC,KAAF,CAA3D;;AAEA,QAAMG,kBAAkB,GAAKC,IAAF,IAAY;AACtC1B,IAAAA,QAAQ,CAAE,EACT,GAAGD,MADM;AAETU,MAAAA,kBAAkB,EAAE,CAAEiB,IAAF,EAAQF,IAAR,EAAeN,IAAf,CAAqB,EAArB;AAFX,KAAF,CAAR;AAIA,GALD,CAJ8D,CAW9D;;;AACA,QAAMS,gBAAgB,GAAKC,OAAF,IAAe;AACvC;AACA;AACA,QAAIC,QAAJ;;AAEA,QAAK,CAAE,IAAF,EAAQ,KAAR,EAAgBC,QAAhB,CAA0BF,OAA1B,KAAuCJ,IAAI,KAAK,IAArD,EAA4D;AAC3D;AACAK,MAAAA,QAAQ,GAAG,CAAEN,QAAQ,GAAG,EAAb,EAAkBQ,OAAlB,CAA2B,CAA3B,IAAiCH,OAA5C;AACA,KAHD,MAGO,IAAK,CAAE,IAAF,EAAQ,KAAR,EAAgBE,QAAhB,CAA0BN,IAA1B,KAAoCI,OAAO,KAAK,IAArD,EAA4D;AAClE;AACAC,MAAAA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAYV,QAAQ,GAAG,EAAvB,IAA8BK,OAAzC;AACA,KAHM,MAGA,IACN,CAAE,IAAF,EAAQ,IAAR,EAAc,GAAd,EAAoBE,QAApB,CAA8BF,OAA9B,KACAL,QAAQ,GAAG,GAFL,EAGL;AACD;AACAM,MAAAA,QAAQ,GAAG,MAAMD,OAAjB;AACA;;AAED5B,IAAAA,QAAQ,CAAE,EACT,GAAGD,MADM;AAETU,MAAAA,kBAAkB,EAAEoB;AAFX,KAAF,CAAR;AAIA,GAvBD;;AAyBA,SACC,gCACC,cAAC,WAAD,CAAa,WAAb;AAAyB,IAAA,EAAE,EAAC;AAA5B,KACGrD,EAAE,CAAE,sBAAF,CADL,CADD,EAIC,cAAC,IAAD;AAAM,IAAA,GAAG,EAAG;AAAZ,KACC,cAAC,QAAD;AAAU,IAAA,OAAO;AAAjB,KACC,cAAC,WAAD;AACC,IAAA,IAAI,EAAG,kBADR;AAEC,IAAA,QAAQ,EAAKqD,QAAF,IAAgB;AAC1B7B,MAAAA,QAAQ,CAAE,EACT,GAAGD,MADM;AAETU,QAAAA,kBAAkB,EAAEoB;AAFX,OAAF,CAAR;AAIA,KAPF;AAQC,IAAA,YAAY,EAAGF,gBARhB;AASC,IAAA,KAAK,EAAGL,KATT;AAUC,IAAA,GAAG,EAAG;AAVP,IADD,CADD,EAeC,cAAC,QAAD;AAAU,IAAA,OAAO;AAAjB,KACC,cAAC,YAAD;AACC,IAAA,QAAQ,EAAGG,kBADZ;AAEC,IAAA,KAAK,EAAGF,QAFT;AAGC,IAAA,GAAG,EAAG,CAHP;AAIC,IAAA,GAAG,EAAGlC,wBAAwB,CAAEmC,IAAF,CAAxB,IAAoC,GAJ3C;AAKC,IAAA,cAAc,EAAG;AALlB,IADD,CAfD,CAJD,CADD;AAgCA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\nimport {\n\tBaseControl,\n\tFlex,\n\tFlexItem,\n\tRangeControl,\n\t__experimentalUnitControl as UnitControl,\n\t__experimentalParseQuantityAndUnitFromRawValue as parseQuantityAndUnitFromRawValue,\n} from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport { appendSelectors, getBlockGapCSS } from './utils';\nimport { getGapCSSValue } from '../hooks/gap';\nimport { shouldSkipSerialization } from '../hooks/utils';\n\nconst RANGE_CONTROL_MAX_VALUES = {\n\tpx: 600,\n\t'%': 100,\n\tvw: 100,\n\tvh: 100,\n\tem: 38,\n\trem: 38,\n};\n\nexport default {\n\tname: 'grid',\n\tlabel: __( 'Grid' ),\n\tinspectorControls: function GridLayoutInspectorControls( {\n\t\tlayout = {},\n\t\tonChange,\n\t} ) {\n\t\treturn (\n\t\t\t<GridLayoutMinimumWidthControl\n\t\t\t\tlayout={ layout }\n\t\t\t\tonChange={ onChange }\n\t\t\t/>\n\t\t);\n\t},\n\ttoolBarControls: function DefaultLayoutToolbarControls() {\n\t\treturn null;\n\t},\n\tgetLayoutStyle: function getLayoutStyle( {\n\t\tselector,\n\t\tlayout,\n\t\tstyle,\n\t\tblockName,\n\t\thasBlockGapSupport,\n\t\tlayoutDefinitions,\n\t} ) {\n\t\tconst { minimumColumnWidth = '12rem' } = layout;\n\n\t\t// If a block's block.json skips serialization for spacing or spacing.blockGap,\n\t\t// don't apply the user-defined value to the styles.\n\t\tconst blockGapValue =\n\t\t\tstyle?.spacing?.blockGap &&\n\t\t\t! shouldSkipSerialization( blockName, 'spacing', 'blockGap' )\n\t\t\t\t? getGapCSSValue( style?.spacing?.blockGap, '0.5em' )\n\t\t\t\t: undefined;\n\n\t\tlet output = '';\n\t\tconst rules = [];\n\n\t\tif ( minimumColumnWidth ) {\n\t\t\trules.push(\n\t\t\t\t`grid-template-columns: repeat(auto-fill, minmax(min(${ minimumColumnWidth }, 100%), 1fr))`\n\t\t\t);\n\t\t}\n\n\t\tif ( rules.length ) {\n\t\t\t// Reason to disable: the extra line breaks added by prettier mess with the unit tests.\n\t\t\t// eslint-disable-next-line prettier/prettier\n\t\t\toutput = `${ appendSelectors( selector ) } { ${ rules.join(\n\t\t\t\t'; '\n\t\t\t) }; }`;\n\t\t}\n\n\t\t// Output blockGap styles based on rules contained in layout definitions in theme.json.\n\t\tif ( hasBlockGapSupport && blockGapValue ) {\n\t\t\toutput += getBlockGapCSS(\n\t\t\t\tselector,\n\t\t\t\tlayoutDefinitions,\n\t\t\t\t'grid',\n\t\t\t\tblockGapValue\n\t\t\t);\n\t\t}\n\t\treturn output;\n\t},\n\tgetOrientation() {\n\t\treturn 'horizontal';\n\t},\n\tgetAlignments() {\n\t\treturn [];\n\t},\n};\n\n// Enables setting minimum width of grid items.\nfunction GridLayoutMinimumWidthControl( { layout, onChange } ) {\n\tconst { minimumColumnWidth: value = '12rem' } = layout;\n\tconst [ quantity, unit ] = parseQuantityAndUnitFromRawValue( value );\n\n\tconst handleSliderChange = ( next ) => {\n\t\tonChange( {\n\t\t\t...layout,\n\t\t\tminimumColumnWidth: [ next, unit ].join( '' ),\n\t\t} );\n\t};\n\n\t// Mostly copied from HeightControl.\n\tconst handleUnitChange = ( newUnit ) => {\n\t\t// Attempt to smooth over differences between currentUnit and newUnit.\n\t\t// This should slightly improve the experience of switching between unit types.\n\t\tlet newValue;\n\n\t\tif ( [ 'em', 'rem' ].includes( newUnit ) && unit === 'px' ) {\n\t\t\t// Convert pixel value to an approximate of the new unit, assuming a root size of 16px.\n\t\t\tnewValue = ( quantity / 16 ).toFixed( 2 ) + newUnit;\n\t\t} else if ( [ 'em', 'rem' ].includes( unit ) && newUnit === 'px' ) {\n\t\t\t// Convert to pixel value assuming a root size of 16px.\n\t\t\tnewValue = Math.round( quantity * 16 ) + newUnit;\n\t\t} else if (\n\t\t\t[ 'vh', 'vw', '%' ].includes( newUnit ) &&\n\t\t\tquantity > 100\n\t\t) {\n\t\t\t// When converting to `vh`, `vw`, or `%` units, cap the new value at 100.\n\t\t\tnewValue = 100 + newUnit;\n\t\t}\n\n\t\tonChange( {\n\t\t\t...layout,\n\t\t\tminimumColumnWidth: newValue,\n\t\t} );\n\t};\n\n\treturn (\n\t\t<fieldset>\n\t\t\t<BaseControl.VisualLabel as=\"legend\">\n\t\t\t\t{ __( 'Minimum column width' ) }\n\t\t\t</BaseControl.VisualLabel>\n\t\t\t<Flex gap={ 4 }>\n\t\t\t\t<FlexItem isBlock>\n\t\t\t\t\t<UnitControl\n\t\t\t\t\t\tsize={ '__unstable-large' }\n\t\t\t\t\t\tonChange={ ( newValue ) => {\n\t\t\t\t\t\t\tonChange( {\n\t\t\t\t\t\t\t\t...layout,\n\t\t\t\t\t\t\t\tminimumColumnWidth: newValue,\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} }\n\t\t\t\t\t\tonUnitChange={ handleUnitChange }\n\t\t\t\t\t\tvalue={ value }\n\t\t\t\t\t\tmin={ 0 }\n\t\t\t\t\t/>\n\t\t\t\t</FlexItem>\n\t\t\t\t<FlexItem isBlock>\n\t\t\t\t\t<RangeControl\n\t\t\t\t\t\tonChange={ handleSliderChange }\n\t\t\t\t\t\tvalue={ quantity }\n\t\t\t\t\t\tmin={ 0 }\n\t\t\t\t\t\tmax={ RANGE_CONTROL_MAX_VALUES[ unit ] || 600 }\n\t\t\t\t\t\twithInputField={ false }\n\t\t\t\t\t/>\n\t\t\t\t</FlexItem>\n\t\t\t</Flex>\n\t\t</fieldset>\n\t);\n}\n"]}