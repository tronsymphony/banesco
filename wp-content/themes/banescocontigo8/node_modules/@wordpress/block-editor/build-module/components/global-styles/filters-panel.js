import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { __experimentalToolsPanel as ToolsPanel, __experimentalToolsPanelItem as ToolsPanelItem, __experimentalVStack as VStack, DuotonePicker } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useCallback, useMemo } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { getValueFromVariable } from './utils';
import { immutableSet } from '../../utils/object';
const EMPTY_ARRAY = [];

function useMultiOriginColorPresets(settings, _ref) {
  var _settings$color, _settings$color2, _settings$color2$pres, _settings$color3, _settings$color3$pres, _settings$color4, _settings$color4$pres;

  let {
    presetSetting,
    defaultSetting
  } = _ref;
  const disableDefault = !(settings !== null && settings !== void 0 && (_settings$color = settings.color) !== null && _settings$color !== void 0 && _settings$color[defaultSetting]);
  const userPresets = (settings === null || settings === void 0 ? void 0 : (_settings$color2 = settings.color) === null || _settings$color2 === void 0 ? void 0 : (_settings$color2$pres = _settings$color2[presetSetting]) === null || _settings$color2$pres === void 0 ? void 0 : _settings$color2$pres.custom) || EMPTY_ARRAY;
  const themePresets = (settings === null || settings === void 0 ? void 0 : (_settings$color3 = settings.color) === null || _settings$color3 === void 0 ? void 0 : (_settings$color3$pres = _settings$color3[presetSetting]) === null || _settings$color3$pres === void 0 ? void 0 : _settings$color3$pres.theme) || EMPTY_ARRAY;
  const defaultPresets = (settings === null || settings === void 0 ? void 0 : (_settings$color4 = settings.color) === null || _settings$color4 === void 0 ? void 0 : (_settings$color4$pres = _settings$color4[presetSetting]) === null || _settings$color4$pres === void 0 ? void 0 : _settings$color4$pres.default) || EMPTY_ARRAY;
  return useMemo(() => [...userPresets, ...themePresets, ...(disableDefault ? EMPTY_ARRAY : defaultPresets)], [disableDefault, userPresets, themePresets, defaultPresets]);
}

export function useHasFiltersPanel(settings) {
  const hasDuotone = useHasDuotoneControl(settings);
  return hasDuotone;
}

function useHasDuotoneControl(settings) {
  return settings.color.customDuotone || settings.color.defaultDuotone;
}

function FiltersToolsPanel(_ref2) {
  let {
    resetAllFilter,
    onChange,
    value,
    panelId,
    children
  } = _ref2;

  const resetAll = () => {
    const updatedValue = resetAllFilter(value);
    onChange(updatedValue);
  };

  return createElement(ToolsPanel, {
    label: __('Filters'),
    resetAll: resetAll,
    panelId: panelId
  }, children);
}

const DEFAULT_CONTROLS = {
  duotone: true
};
export default function FiltersPanel(_ref3) {
  var _inheritedValue$filte;

  let {
    as: Wrapper = FiltersToolsPanel,
    value,
    onChange,
    inheritedValue = value,
    settings,
    panelId,
    defaultControls = DEFAULT_CONTROLS
  } = _ref3;

  const decodeValue = rawValue => getValueFromVariable({
    settings
  }, '', rawValue); // Duotone


  const hasDuotoneEnabled = useHasDuotoneControl(settings);
  const duotonePalette = useMultiOriginColorPresets(settings, {
    presetSetting: 'duotone',
    defaultSetting: 'defaultDuotone'
  });
  const colorPalette = useMultiOriginColorPresets(settings, {
    presetSetting: 'palette',
    defaultSetting: 'defaultPalette'
  });
  const duotone = decodeValue(inheritedValue === null || inheritedValue === void 0 ? void 0 : (_inheritedValue$filte = inheritedValue.filter) === null || _inheritedValue$filte === void 0 ? void 0 : _inheritedValue$filte.duotone);

  const setDuotone = newValue => {
    const duotonePreset = duotonePalette.find(_ref4 => {
      let {
        colors
      } = _ref4;
      return colors === newValue;
    });
    const settedValue = duotonePreset ? `var:preset|duotone|${duotonePreset.slug}` : newValue;
    onChange(immutableSet(value, ['filter', 'duotone'], settedValue));
  };

  const hasDuotone = () => {
    var _value$filter;

    return !!(value !== null && value !== void 0 && (_value$filter = value.filter) !== null && _value$filter !== void 0 && _value$filter.duotone);
  };

  const resetDuotone = () => setDuotone(undefined);

  const resetAllFilter = useCallback(previousValue => {
    return { ...previousValue,
      filter: { ...previousValue.filter,
        duotone: undefined
      }
    };
  }, []);
  return createElement(Wrapper, {
    resetAllFilter: resetAllFilter,
    value: value,
    onChange: onChange,
    panelId: panelId
  }, hasDuotoneEnabled && createElement(ToolsPanelItem, {
    label: __('Duotone'),
    hasValue: hasDuotone,
    onDeselect: resetDuotone,
    isShownByDefault: defaultControls.duotone,
    panelId: panelId
  }, createElement(VStack, null, createElement("p", null, __('Create a two-tone color effect without losing your original image.')), createElement(DuotonePicker, {
    colorPalette: colorPalette,
    duotonePalette: duotonePalette,
    disableCustomColors: true,
    disableCustomDuotone: true,
    value: duotone,
    onChange: setDuotone
  }))));
}
//# sourceMappingURL=filters-panel.js.map