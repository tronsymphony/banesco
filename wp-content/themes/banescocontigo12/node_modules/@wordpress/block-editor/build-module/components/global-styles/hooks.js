/**
 * External dependencies
 */
import fastDeepEqual from 'fast-deep-equal/es6';
import { get, set } from 'lodash';
/**
 * WordPress dependencies
 */

import { useContext, useCallback } from '@wordpress/element';
/**
 * Internal dependencies
 */

import { getValueFromVariable, getPresetVariableFromValue } from './utils';
import { GlobalStylesContext } from './context';
const EMPTY_CONFIG = {
  settings: {},
  styles: {}
};
export const useGlobalStylesReset = () => {
  const {
    user: config,
    setUserConfig
  } = useContext(GlobalStylesContext);
  const canReset = !!config && !fastDeepEqual(config, EMPTY_CONFIG);
  return [canReset, useCallback(() => setUserConfig(() => EMPTY_CONFIG), [setUserConfig])];
};
export function useGlobalSetting(path, blockName) {
  var _getSettingValueForCo;

  let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'all';
  const {
    merged: mergedConfig,
    base: baseConfig,
    user: userConfig,
    setUserConfig
  } = useContext(GlobalStylesContext);
  const fullPath = !blockName ? `settings.${path}` : `settings.blocks.${blockName}.${path}`;

  const setSetting = newValue => {
    setUserConfig(currentConfig => {
      // Deep clone `currentConfig` to avoid mutating it later.
      const newUserConfig = JSON.parse(JSON.stringify(currentConfig));
      set(newUserConfig, fullPath, newValue);
      return newUserConfig;
    });
  };

  const getSettingValueForContext = name => {
    const currentPath = !name ? `settings.${path}` : `settings.blocks.${name}.${path}`;
    let result;

    switch (source) {
      case 'all':
        result = get(mergedConfig, currentPath);
        break;

      case 'user':
        result = get(userConfig, currentPath);
        break;

      case 'base':
        result = get(baseConfig, currentPath);
        break;

      default:
        throw 'Unsupported source';
    }

    return result;
  }; // Unlike styles settings get inherited from top level settings.


  const resultWithFallback = (_getSettingValueForCo = getSettingValueForContext(blockName)) !== null && _getSettingValueForCo !== void 0 ? _getSettingValueForCo : getSettingValueForContext();
  return [resultWithFallback, setSetting];
}
export function useGlobalStyle(path, blockName) {
  var _get;

  let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'all';
  const {
    merged: mergedConfig,
    base: baseConfig,
    user: userConfig,
    setUserConfig
  } = useContext(GlobalStylesContext);
  const finalPath = !blockName ? `styles.${path}` : `styles.blocks.${blockName}.${path}`;

  const setStyle = newValue => {
    setUserConfig(currentConfig => {
      // Deep clone `currentConfig` to avoid mutating it later.
      const newUserConfig = JSON.parse(JSON.stringify(currentConfig));
      set(newUserConfig, finalPath, getPresetVariableFromValue(mergedConfig.settings, blockName, path, newValue));
      return newUserConfig;
    });
  };

  let result;

  switch (source) {
    case 'all':
      result = getValueFromVariable(mergedConfig, blockName, // The stlyes.css path is allowed to be empty, so don't revert to base if undefined.
      finalPath === 'styles.css' ? get(userConfig, finalPath) : (_get = get(userConfig, finalPath)) !== null && _get !== void 0 ? _get : get(baseConfig, finalPath));
      break;

    case 'user':
      result = getValueFromVariable(mergedConfig, blockName, get(userConfig, finalPath));
      break;

    case 'base':
      result = getValueFromVariable(baseConfig, blockName, get(baseConfig, finalPath));
      break;

    default:
      throw 'Unsupported source';
  }

  return [result, setStyle];
}
//# sourceMappingURL=hooks.js.map