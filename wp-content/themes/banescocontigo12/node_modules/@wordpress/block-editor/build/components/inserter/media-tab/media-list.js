"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _components = require("@wordpress/components");

var _i18n = require("@wordpress/i18n");

var _blocks = require("@wordpress/blocks");

var _icons = require("@wordpress/icons");

var _inserterDraggableBlocks = _interopRequireDefault(require("../../inserter-draggable-blocks"));

var _utils = require("./utils");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const MAXIMUM_TITLE_LENGTH = 25;
const MEDIA_OPTIONS_POPOVER_PROPS = {
  position: 'bottom left',
  className: 'block-editor-inserter__media-list__item-preview-options__popover'
};

function MediaPreviewOptions(_ref) {
  let {
    category,
    media
  } = _ref;

  if (!category.getReportUrl) {
    return null;
  }

  const reportUrl = category.getReportUrl(media);
  return (0, _element.createElement)(_components.DropdownMenu, {
    className: "block-editor-inserter__media-list__item-preview-options",
    label: (0, _i18n.__)('Options'),
    popoverProps: MEDIA_OPTIONS_POPOVER_PROPS,
    icon: _icons.moreVertical
  }, () => (0, _element.createElement)(_components.MenuGroup, null, (0, _element.createElement)(_components.MenuItem, {
    onClick: () => window.open(reportUrl, '_blank').focus(),
    icon: _icons.external
  }, (0, _i18n.sprintf)(
  /* translators: %s: The media type to report e.g: "image", "video", "audio" */
  (0, _i18n.__)('Report %s'), category.mediaType))));
}

function MediaPreview(_ref2) {
  var _media$title;

  let {
    media,
    onClick,
    composite,
    category
  } = _ref2;
  const [isHovered, setIsHovered] = (0, _element.useState)(false);
  const [block, preview] = (0, _element.useMemo)(() => (0, _utils.getBlockAndPreviewFromMedia)(media, category.mediaType), [media, category.mediaType]);
  const title = ((_media$title = media.title) === null || _media$title === void 0 ? void 0 : _media$title.rendered) || media.title;
  let truncatedTitle;

  if (title.length > MAXIMUM_TITLE_LENGTH) {
    const omission = '...';
    truncatedTitle = title.slice(0, MAXIMUM_TITLE_LENGTH - omission.length) + omission;
  }

  const onMouseEnter = (0, _element.useCallback)(() => setIsHovered(true), []);
  const onMouseLeave = (0, _element.useCallback)(() => setIsHovered(false), []);
  return (0, _element.createElement)(_inserterDraggableBlocks.default, {
    isEnabled: true,
    blocks: [block]
  }, _ref3 => {
    let {
      draggable,
      onDragStart,
      onDragEnd
    } = _ref3;
    return (0, _element.createElement)("div", {
      className: (0, _classnames.default)('block-editor-inserter__media-list__list-item', {
        'is-hovered': isHovered
      }),
      draggable: draggable,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd
    }, (0, _element.createElement)(_components.Tooltip, {
      text: truncatedTitle || title
    }, (0, _element.createElement)("div", {
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, (0, _element.createElement)(_components.__unstableCompositeItem, (0, _extends2.default)({
      role: "option",
      as: "div"
    }, composite, {
      className: "block-editor-inserter__media-list__item",
      onClick: () => onClick(block),
      "aria-label": title
    }), (0, _element.createElement)("div", {
      className: "block-editor-inserter__media-list__item-preview"
    }, preview)), (0, _element.createElement)(MediaPreviewOptions, {
      category: category,
      media: media
    }))));
  });
}

function MediaList(_ref4) {
  let {
    mediaList,
    category,
    onClick,
    label = (0, _i18n.__)('Media List')
  } = _ref4;
  const composite = (0, _components.__unstableUseCompositeState)();
  const onPreviewClick = (0, _element.useCallback)(block => {
    onClick((0, _blocks.cloneBlock)(block));
  }, [onClick]);
  return (0, _element.createElement)(_components.__unstableComposite, (0, _extends2.default)({}, composite, {
    role: "listbox",
    className: "block-editor-inserter__media-list",
    "aria-label": label
  }), mediaList.map((media, index) => (0, _element.createElement)(MediaPreview, {
    key: media.id || media.sourceId || index,
    media: media,
    category: category,
    onClick: onPreviewClick,
    composite: composite
  })));
}

var _default = MediaList;
exports.default = _default;
//# sourceMappingURL=media-list.js.map