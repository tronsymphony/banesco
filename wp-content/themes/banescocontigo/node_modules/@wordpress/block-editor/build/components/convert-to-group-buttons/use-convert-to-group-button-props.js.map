{"version":3,"sources":["@wordpress/block-editor/src/components/convert-to-group-buttons/use-convert-to-group-button-props.js"],"names":["useConvertToGroupButtonProps","selectedClientIds","clientIds","isGroupable","isUngroupable","blocksSelection","groupingBlockName","select","getBlockRootClientId","getBlocksByClientId","canInsertBlockType","getSelectedBlockClientIds","blockEditorStore","getGroupingBlockName","blocksStore","_clientIds","length","_groupingBlockName","rootClientId","undefined","groupingBlockAvailable","_blocksSelection","isSingleGroupingBlock","name","_isGroupable","_isUngroupable","innerBlocks"],"mappings":";;;;;;;AAGA;;AACA;;AAKA;;AATA;AACA;AACA;;AAIA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,4BAAT,CAAuCC,iBAAvC,EAA2D;AACzE,QAAM;AACLC,IAAAA,SADK;AAELC,IAAAA,WAFK;AAGLC,IAAAA,aAHK;AAILC,IAAAA,eAJK;AAKLC,IAAAA;AALK,MAMF,qBACDC,MAAF,IAAc;AAAA;;AACb,UAAM;AACLC,MAAAA,oBADK;AAELC,MAAAA,mBAFK;AAGLC,MAAAA,kBAHK;AAILC,MAAAA;AAJK,QAKFJ,MAAM,CAAEK,YAAF,CALV;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAA2BN,MAAM,CAAEO,aAAF,CAAvC;;AAEA,UAAMC,UAAU,GAAGd,iBAAiB,SAAjB,IAAAA,iBAAiB,WAAjB,IAAAA,iBAAiB,CAAEe,MAAnB,GAChBf,iBADgB,GAEhBU,yBAAyB,EAF5B;;AAGA,UAAMM,kBAAkB,GAAGJ,oBAAoB,EAA/C;;AAEA,UAAMK,YAAY,GAAG,CAAC,EAAEH,UAAF,aAAEA,UAAF,eAAEA,UAAU,CAAEC,MAAd,CAAD,GAClBR,oBAAoB,CAAEO,UAAU,CAAE,CAAF,CAAZ,CADF,GAElBI,SAFH;AAIA,UAAMC,sBAAsB,GAAGV,kBAAkB,CAChDO,kBADgD,EAEhDC,YAFgD,CAAjD;;AAKA,UAAMG,gBAAgB,GAAGZ,mBAAmB,CAAEM,UAAF,CAA5C;;AAEA,UAAMO,qBAAqB,GAC1BD,gBAAgB,CAACL,MAAjB,KAA4B,CAA5B,IACA,sBAAAK,gBAAgB,CAAE,CAAF,CAAhB,wEAAuBE,IAAvB,MAAgCN,kBAFjC,CAzBa,CA6Bb;AACA;AACA;;AACA,UAAMO,YAAY,GACjBJ,sBAAsB,IAAIC,gBAAgB,CAACL,MAD5C,CAhCa,CAmCb;;;AACA,UAAMS,cAAc,GACnBH,qBAAqB,IACrB,CAAC,CAAED,gBAAgB,CAAE,CAAF,CAAhB,CAAsBK,WAAtB,CAAkCV,MAFtC;;AAGA,WAAO;AACNd,MAAAA,SAAS,EAAEa,UADL;AAENZ,MAAAA,WAAW,EAAEqB,YAFP;AAGNpB,MAAAA,aAAa,EAAEqB,cAHT;AAINpB,MAAAA,eAAe,EAAEgB,gBAJX;AAKNf,MAAAA,iBAAiB,EAAEW;AALb,KAAP;AAOA,GA/CE,EAgDH,CAAEhB,iBAAF,CAhDG,CANJ;AAyDA,SAAO;AACNC,IAAAA,SADM;AAENC,IAAAA,WAFM;AAGNC,IAAAA,aAHM;AAINC,IAAAA,eAJM;AAKNC,IAAAA;AALM,GAAP;AAOA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { store as blocksStore } from '@wordpress/blocks';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\n\n/**\n * Contains the properties `ConvertToGroupButton` component needs.\n *\n * @typedef {Object} ConvertToGroupButtonProps\n * @property {string[]}  clientIds         An array of the selected client ids.\n * @property {boolean}   isGroupable       Indicates if the selected blocks can be grouped.\n * @property {boolean}   isUngroupable     Indicates if the selected blocks can be ungrouped.\n * @property {WPBlock[]} blocksSelection   An array of the selected blocks.\n * @property {string}    groupingBlockName The name of block used for handling grouping interactions.\n */\n\n/**\n * Returns the properties `ConvertToGroupButton` component needs to work properly.\n * It is used in `BlockSettingsMenuControls` to know if `ConvertToGroupButton`\n * should be rendered, to avoid ending up with an empty MenuGroup.\n *\n * @param {?string[]} selectedClientIds An optional array of clientIds to group. The selected blocks\n *                                      from the block editor store are used if this is not provided.\n *\n * @return {ConvertToGroupButtonProps} Returns the properties needed by `ConvertToGroupButton`.\n */\nexport default function useConvertToGroupButtonProps( selectedClientIds ) {\n\tconst {\n\t\tclientIds,\n\t\tisGroupable,\n\t\tisUngroupable,\n\t\tblocksSelection,\n\t\tgroupingBlockName,\n\t} = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlockRootClientId,\n\t\t\t\tgetBlocksByClientId,\n\t\t\t\tcanInsertBlockType,\n\t\t\t\tgetSelectedBlockClientIds,\n\t\t\t} = select( blockEditorStore );\n\t\t\tconst { getGroupingBlockName } = select( blocksStore );\n\n\t\t\tconst _clientIds = selectedClientIds?.length\n\t\t\t\t? selectedClientIds\n\t\t\t\t: getSelectedBlockClientIds();\n\t\t\tconst _groupingBlockName = getGroupingBlockName();\n\n\t\t\tconst rootClientId = !! _clientIds?.length\n\t\t\t\t? getBlockRootClientId( _clientIds[ 0 ] )\n\t\t\t\t: undefined;\n\n\t\t\tconst groupingBlockAvailable = canInsertBlockType(\n\t\t\t\t_groupingBlockName,\n\t\t\t\trootClientId\n\t\t\t);\n\n\t\t\tconst _blocksSelection = getBlocksByClientId( _clientIds );\n\n\t\t\tconst isSingleGroupingBlock =\n\t\t\t\t_blocksSelection.length === 1 &&\n\t\t\t\t_blocksSelection[ 0 ]?.name === _groupingBlockName;\n\n\t\t\t// Do we have\n\t\t\t// 1. Grouping block available to be inserted?\n\t\t\t// 2. One or more blocks selected\n\t\t\tconst _isGroupable =\n\t\t\t\tgroupingBlockAvailable && _blocksSelection.length;\n\n\t\t\t// Do we have a single Group Block selected and does that group have inner blocks?\n\t\t\tconst _isUngroupable =\n\t\t\t\tisSingleGroupingBlock &&\n\t\t\t\t!! _blocksSelection[ 0 ].innerBlocks.length;\n\t\t\treturn {\n\t\t\t\tclientIds: _clientIds,\n\t\t\t\tisGroupable: _isGroupable,\n\t\t\t\tisUngroupable: _isUngroupable,\n\t\t\t\tblocksSelection: _blocksSelection,\n\t\t\t\tgroupingBlockName: _groupingBlockName,\n\t\t\t};\n\t\t},\n\t\t[ selectedClientIds ]\n\t);\n\n\treturn {\n\t\tclientIds,\n\t\tisGroupable,\n\t\tisUngroupable,\n\t\tblocksSelection,\n\t\tgroupingBlockName,\n\t};\n}\n"]}