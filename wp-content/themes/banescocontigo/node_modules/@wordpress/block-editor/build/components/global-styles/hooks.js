"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGlobalSetting = useGlobalSetting;
exports.useGlobalStyle = useGlobalStyle;
exports.useGlobalStylesReset = void 0;

var _es = _interopRequireDefault(require("fast-deep-equal/es6"));

var _lodash = require("lodash");

var _element = require("@wordpress/element");

var _utils = require("./utils");

var _context = require("./context");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const EMPTY_CONFIG = {
  settings: {},
  styles: {}
};

const useGlobalStylesReset = () => {
  const {
    user: config,
    setUserConfig
  } = (0, _element.useContext)(_context.GlobalStylesContext);
  const canReset = !!config && !(0, _es.default)(config, EMPTY_CONFIG);
  return [canReset, (0, _element.useCallback)(() => setUserConfig(() => EMPTY_CONFIG), [setUserConfig])];
};

exports.useGlobalStylesReset = useGlobalStylesReset;

function useGlobalSetting(path, blockName) {
  var _getSettingValueForCo;

  let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'all';
  const {
    merged: mergedConfig,
    base: baseConfig,
    user: userConfig,
    setUserConfig
  } = (0, _element.useContext)(_context.GlobalStylesContext);
  const fullPath = !blockName ? `settings.${path}` : `settings.blocks.${blockName}.${path}`;

  const setSetting = newValue => {
    setUserConfig(currentConfig => {
      // Deep clone `currentConfig` to avoid mutating it later.
      const newUserConfig = JSON.parse(JSON.stringify(currentConfig));
      (0, _lodash.set)(newUserConfig, fullPath, newValue);
      return newUserConfig;
    });
  };

  const getSettingValueForContext = name => {
    const currentPath = !name ? `settings.${path}` : `settings.blocks.${name}.${path}`;
    let result;

    switch (source) {
      case 'all':
        result = (0, _lodash.get)(mergedConfig, currentPath);
        break;

      case 'user':
        result = (0, _lodash.get)(userConfig, currentPath);
        break;

      case 'base':
        result = (0, _lodash.get)(baseConfig, currentPath);
        break;

      default:
        throw 'Unsupported source';
    }

    return result;
  }; // Unlike styles settings get inherited from top level settings.


  const resultWithFallback = (_getSettingValueForCo = getSettingValueForContext(blockName)) !== null && _getSettingValueForCo !== void 0 ? _getSettingValueForCo : getSettingValueForContext();
  return [resultWithFallback, setSetting];
}

function useGlobalStyle(path, blockName) {
  var _get;

  let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'all';
  const {
    merged: mergedConfig,
    base: baseConfig,
    user: userConfig,
    setUserConfig
  } = (0, _element.useContext)(_context.GlobalStylesContext);
  const finalPath = !blockName ? `styles.${path}` : `styles.blocks.${blockName}.${path}`;

  const setStyle = newValue => {
    setUserConfig(currentConfig => {
      // Deep clone `currentConfig` to avoid mutating it later.
      const newUserConfig = JSON.parse(JSON.stringify(currentConfig));
      (0, _lodash.set)(newUserConfig, finalPath, (0, _utils.getPresetVariableFromValue)(mergedConfig.settings, blockName, path, newValue));
      return newUserConfig;
    });
  };

  let result;

  switch (source) {
    case 'all':
      result = (0, _utils.getValueFromVariable)(mergedConfig, blockName, // The stlyes.css path is allowed to be empty, so don't revert to base if undefined.
      finalPath === 'styles.css' ? (0, _lodash.get)(userConfig, finalPath) : (_get = (0, _lodash.get)(userConfig, finalPath)) !== null && _get !== void 0 ? _get : (0, _lodash.get)(baseConfig, finalPath));
      break;

    case 'user':
      result = (0, _utils.getValueFromVariable)(mergedConfig, blockName, (0, _lodash.get)(userConfig, finalPath));
      break;

    case 'base':
      result = (0, _utils.getValueFromVariable)(baseConfig, blockName, (0, _lodash.get)(baseConfig, finalPath));
      break;

    default:
      throw 'Unsupported source';
  }

  return [result, setStyle];
}
//# sourceMappingURL=hooks.js.map