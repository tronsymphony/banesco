import _extends from "@babel/runtime/helpers/esm/extends";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { __unstableComposite as Composite, __unstableUseCompositeState as useCompositeState, __unstableCompositeItem as CompositeItem, Tooltip, DropdownMenu, MenuGroup, MenuItem } from '@wordpress/components';
import { __, sprintf } from '@wordpress/i18n';
import { useMemo, useCallback, useState } from '@wordpress/element';
import { cloneBlock } from '@wordpress/blocks';
import { moreVertical, external } from '@wordpress/icons';
/**
 * Internal dependencies
 */

import InserterDraggableBlocks from '../../inserter-draggable-blocks';
import { getBlockAndPreviewFromMedia } from './utils';
const MAXIMUM_TITLE_LENGTH = 25;
const MEDIA_OPTIONS_POPOVER_PROPS = {
  position: 'bottom left',
  className: 'block-editor-inserter__media-list__item-preview-options__popover'
};

function MediaPreviewOptions(_ref) {
  let {
    category,
    media
  } = _ref;

  if (!category.getReportUrl) {
    return null;
  }

  const reportUrl = category.getReportUrl(media);
  return createElement(DropdownMenu, {
    className: "block-editor-inserter__media-list__item-preview-options",
    label: __('Options'),
    popoverProps: MEDIA_OPTIONS_POPOVER_PROPS,
    icon: moreVertical
  }, () => createElement(MenuGroup, null, createElement(MenuItem, {
    onClick: () => window.open(reportUrl, '_blank').focus(),
    icon: external
  }, sprintf(
  /* translators: %s: The media type to report e.g: "image", "video", "audio" */
  __('Report %s'), category.mediaType))));
}

function MediaPreview(_ref2) {
  var _media$title;

  let {
    media,
    onClick,
    composite,
    category
  } = _ref2;
  const [isHovered, setIsHovered] = useState(false);
  const [block, preview] = useMemo(() => getBlockAndPreviewFromMedia(media, category.mediaType), [media, category.mediaType]);
  const title = ((_media$title = media.title) === null || _media$title === void 0 ? void 0 : _media$title.rendered) || media.title;
  let truncatedTitle;

  if (title.length > MAXIMUM_TITLE_LENGTH) {
    const omission = '...';
    truncatedTitle = title.slice(0, MAXIMUM_TITLE_LENGTH - omission.length) + omission;
  }

  const onMouseEnter = useCallback(() => setIsHovered(true), []);
  const onMouseLeave = useCallback(() => setIsHovered(false), []);
  return createElement(InserterDraggableBlocks, {
    isEnabled: true,
    blocks: [block]
  }, _ref3 => {
    let {
      draggable,
      onDragStart,
      onDragEnd
    } = _ref3;
    return createElement("div", {
      className: classnames('block-editor-inserter__media-list__list-item', {
        'is-hovered': isHovered
      }),
      draggable: draggable,
      onDragStart: onDragStart,
      onDragEnd: onDragEnd
    }, createElement(Tooltip, {
      text: truncatedTitle || title
    }, createElement("div", {
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, createElement(CompositeItem, _extends({
      role: "option",
      as: "div"
    }, composite, {
      className: "block-editor-inserter__media-list__item",
      onClick: () => onClick(block),
      "aria-label": title
    }), createElement("div", {
      className: "block-editor-inserter__media-list__item-preview"
    }, preview)), createElement(MediaPreviewOptions, {
      category: category,
      media: media
    }))));
  });
}

function MediaList(_ref4) {
  let {
    mediaList,
    category,
    onClick,
    label = __('Media List')
  } = _ref4;
  const composite = useCompositeState();
  const onPreviewClick = useCallback(block => {
    onClick(cloneBlock(block));
  }, [onClick]);
  return createElement(Composite, _extends({}, composite, {
    role: "listbox",
    className: "block-editor-inserter__media-list",
    "aria-label": label
  }), mediaList.map((media, index) => createElement(MediaPreview, {
    key: media.id || media.sourceId || index,
    media: media,
    category: category,
    onClick: onPreviewClick,
    composite: composite
  })));
}

export default MediaList;
//# sourceMappingURL=media-list.js.map